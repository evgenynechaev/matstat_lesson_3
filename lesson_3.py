import numpy as np
from functools import reduce
from math import factorial, e


def combinations(n: int, k: int):
    return int(factorial(n) / (factorial(k) * factorial(n - k)))


def my_mean(in_array: list):
    return sum(in_array) / len(in_array)


def my_std(in_array: list):
    mean = my_mean(in_array)
    arr_len = len(in_array)
    sum_map = sum(map(lambda x: (x - mean) ** 2, in_array))
    return (sum_map / arr_len) ** 0.5


def my_var_shifted(in_array: list):
    mean = my_mean(in_array)
    return sum(map(lambda x: (x - mean) ** 2, in_array)) / len(in_array)


def my_var_not_shifted(in_array: list):
    mean = my_mean(in_array)
    return sum(map(lambda x: (x - mean) ** 2, in_array)) / (len(in_array) - 1)


def task_1():
    """
    Задача 1:
        Даны значения зарплат из выборки выпускников:
        100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150.
        Посчитать (желательно без использования статистических методов наподобие std, var, mean)
        среднее арифметическое,
        среднее квадратичное отклонение,
        смещенную и
        несмещенную оценки дисперсий для данной выборки.
    Решение:
        среднее арифметическое = 65.3000
        среднее квадратичное отклонение = 30.8239
        смещенная оценка дисперсий = 950.1100
        несмещенная оценки дисперсий = 1000.1158
    """
    array = [100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150]
    print("Задача 1")
    print(f"    Расчет при помощи собственных функций:")
    print(f"        Среднее арифметическое выборки: {my_mean(array):.4f}")
    print(f"        Среднее квадратичное отклонение: {my_std(array):.4f}")
    print(f"        Смещенная оценка дисперсии: {my_var_shifted(array):.4f}")
    print(f"        Не смещенная оценка дисперсии: {my_var_not_shifted(array):.4f}")
    print(f"    Проверка при помощи пакета numpy:")
    print(f"        Среднее арифметическое выборки: {np.mean(array):.4f}")
    print(f"        Среднее квадратичное отклонение: {np.std(array):.4f}")
    print(f"        Смещенная оценка дисперсии: {np.var(array):.4f}")
    print(f"        Не смещенная оценка дисперсии: {np.var(array, ddof = 1):.4f}")
    print()


def task_2():
    """
    Задача 2:
        В первом ящике находится 8 мячей, из которых 5 - белые. Во втором ящике - 12 мячей, из которых 5 белых.
        Из первого ящика вытаскивают случайным образом два мяча, из второго - 4.
        Какова вероятность того, что 3 мяча белые?
    Решение:
        Какова вероятность того, что 3 мяча белые?
            5/8  5/12
            мм   мммм
            бб   бччч
            бч   ббчч
            чч   бббч
            три варианта извлечения белых мячей:
            1) 2 белых в первом ящике, 1 белый и 3 черных во втором:
                (10/28) * (5*35/495) = 0.1263
            2) 1 белый и 1 черный в первом ящике, 2 белых и 2 черных во втором:
                (5*3/28) * (10*21/495) = 0.2273
            3) 2 черных в первом, 3 белых и 1 черный во втором:
                # (3/28) * (10*7/495) = 0.0152
            итого вероятность 0.1263 + 0.2273 + 0.0152 = 0.3687
        Ответ: вероятность того, что достали 3 белых мяча составляет 0.3687
    """
    print("Задача 2")

    # Вычисляем комбинации
    n_box_1_total = 8  # Всего мячей в первом ящике
    n_box_1_white = 5  # Белых мячей в первом ящике
    n_box_1_black = n_box_1_total - n_box_1_white  # Черных мячей в первом ящике
    n_box_2_total = 12  # Всего мячей во втором ящике
    n_box_2_white = 5  # Белых мячей во втором ящике
    n_box_2_black = n_box_2_total - n_box_2_white  # Черных мячей во втором ящике
    k_box_one = 1  # Один мяч
    k_box_two = 2  # Два мяча
    k_box_three = 3  # Три мяча
    k_box_four = 4  # Четыре мяча
    combs_box_1_total = combinations(n_box_1_total, k_box_two)  # Всего перестановок двух мячей в первом ящике
    combs_box_2_total = combinations(n_box_2_total, k_box_four)  # Всего перестановок четырех мячей во втором ящике
    combs_box_1_white_one = combinations(n_box_1_white, k_box_one)  # Перестановок одного белого мяча в первом ящике
    combs_box_1_black_one = combinations(n_box_1_black, k_box_one)  # Перестановок одного черного мяча в первом ящике
    combs_box_1_white_two = combinations(n_box_1_white, k_box_two)  # Перестановок двух белых мячей в первом ящике
    combs_box_1_black_two = combinations(n_box_1_black, k_box_two)  # Перестановок двух черных мячей в первом ящике
    combs_box_2_white_one = combinations(n_box_2_white, k_box_one)  # Перестановок одного белого мяча во втором ящике
    combs_box_2_black_one = combinations(n_box_2_black, k_box_one)  # Перестановок одного черного мяча во втором ящике
    combs_box_2_white_two = combinations(n_box_2_white, k_box_two)  # Перестановок двух белых мячей во втором ящике
    combs_box_2_black_two = combinations(n_box_2_black, k_box_two)  # Перестановок двух черных мячей во втором ящике
    combs_box_2_white_three = combinations(n_box_2_white, k_box_three)  # Перестановок трех белых мячей во втором ящике
    combs_box_2_black_three = combinations(n_box_2_black, k_box_three)  # Перестановок трех черных мячей во втором ящике
    print(f"    Комбинации мячей, порядок не имеет значения:")
    print(f"        Ящик 1: "
          f"один белый = {combs_box_1_white_one}, "
          f"один черный = {combs_box_1_black_one}, "
          f"два белых = {combs_box_1_white_two}, "
          f"два черных = {combs_box_1_black_two}, "
          f"всего = {combs_box_1_total}")
    print(f"        Ящик 2: "
          f"один белый = {combs_box_2_white_one}, "
          f"один черный = {combs_box_2_black_one}, "
          f"два белых = {combs_box_2_white_two}, "
          f"два черных = {combs_box_2_black_two}, "
          f"три белых = {combs_box_2_white_three}, "
          f"три черных = {combs_box_2_black_three}, "
          f"всего = {combs_box_2_total}")
    print(f"    Какова вероятность того, что 3 мяча белые?")
    # вероятность 2 белых из первого ящика и 1 белого и 3 черных из второго ящика
    result_white2_white1 = (combs_box_1_white_two / combs_box_1_total) * \
                             (combs_box_2_white_one * combs_box_2_black_three / combs_box_2_total)
    print(f"        вероятность 2 белых из первого ящика и "
          f"1 белого и 3 черных из второго ящика = {result_white2_white1:.4f}")
    # вероятность 2 черных из первого ящика и 3 белых и 1 черного из второго ящика
    result_white0_white3 = (combs_box_1_black_two / combs_box_1_total) * \
                             (combs_box_2_white_three * combs_box_2_black_one / combs_box_2_total)
    print(f"        вероятность 2 черных из первого ящика и "
          f"3 белых и 1 черного из второго ящика = {result_white0_white3:.4f}")
    # вероятность 1 белый и 1 черный из первого ящика и 2 белых и 2 черных из второго ящика
    result_white1_white2 = \
        (combs_box_1_white_one * combs_box_1_black_one / combs_box_1_total) * \
        (combs_box_2_white_two * combs_box_2_black_two / combs_box_2_total)
    print(f"        вероятность 1 белый и 1 черный из 1-го ящика и 2 белых и 2 черных из 2-го ящика = "
          f"{result_white1_white2:.4f}")
    result_v1 = result_white2_white1 + result_white0_white3 + result_white1_white2
    print(f"        сумма вероятностей {result_white2_white1:.4f} + {result_white0_white3:.4f} + "
          f"{result_white1_white2:.4f} = {result_v1:.4f}")
    print(f"    Ответ: вероятность того, что 3 мяча белые составляет {result_v1:.4f}")
    print()


def task_3():
    """
    Задача 3:
        На соревновании по биатлону один из трех спортсменов стреляет и попадает в мишень.
        Вероятность попадания для первого спортсмена равна 0.9, для второго — 0.8, для третьего — 0.6.
        Найти вероятность того, что выстрел произведен:
        a). первым спортсменом
        б). вторым спортсменом
        в). третьим спортсменом.
    Решение:
        Используем формулу Байеса
        A - попадание в мишень
        B1 - стрелял первый спортсмен P(B1) = 1/3
        B2 - стрелял второй спортсмен P(B2) = 1/3
        B3 - стрелял третий спортсмен P(B3) = 1/3
        Первый спортсмен P(A|B1) = 0.9
        Второй спортсмен P(A|B2) = 0.8
        Третий спортсмен P(A|B3) = 0.6
        Полная вероятность:
        P(A) = 1/3 * 0.9 + 1/3 * 0.8 + 1/3 * 0.6 = 0.7667
        Вероятность того, что выстрел произведен спортсменом 1
        P(B1|A) = 1/3 * 0.9 / 0.7667 = 0.3913
        Вероятность того, что выстрел произведен спортсменом 2
        P(B2|A) = 1/3 * 0.8 / 0.7667 = 0.3478
        Вероятность того, что выстрел произведен спортсменом 3
        P(B3|A) = 1/3 * 0.6 / 0.7667 = 0.2609
    Ответ:
        Вероятность того, что выстрел произведен спортсменом 1 составляет 0.3913
        Вероятность того, что выстрел произведен спортсменом 2 составляет 0.3478
        Вероятность того, что выстрел произведен спортсменом 3 составляет 0.2609
    """
    print("Задача 3")
    p_a_bx = [0.9, 0.8, 0.6]
    p_bx = 1 / len(p_a_bx)
    p_a = p_bx * sum(p_a_bx)
    print(f"    Полная вероятность = {p_a:.4f}")
    p_bx_a = list(map(lambda x: p_bx * x / p_a, p_a_bx))
    for i in range(len(p_bx_a)):
        print(f"    Вероятность того, что выстрел произведен спортсменом {i+1} составляет {p_bx_a[i]:.4f}")
    print()


def task_4():
    """
    Задача 4:
        В университет на факультеты A и B поступило равное количество студентов,
        а на факультет C студентов поступило столько же, сколько на A и B вместе.
        Вероятность того, что студент факультета A сдаст первую сессию, равна 0.8.
        Для студента факультета B эта вероятность равна 0.7, а для студента факультета C - 0.9.
        Студент сдал первую сессию. Какова вероятность, что он учится:
        a). на факультете A
        б). на факультете B
        в). на факультете C?
    Решение:
        Используем формулу Байеса
        A - сдача сессии
        На факультете А - X студентов (1)
        На факультете B - X студентов (1)
        На факультете С - 2*X студентов (2)
        Всего X+X+2*X=4*X студентов (4)
        B1 - сдал сессию студент факультета A P(B1) = 1/4
        B2 - сдал сессию студент факультета B P(B2) = 1/4
        B3 - сдал сессию студент факультета C P(B3) = 2/4 = 1/2
        Вероятность того, что студент факультета A сдаст первую сессию P(A|B1) = 0.8
        Вероятность того, что студент факультета B сдаст первую сессию P(A|B2) = 0.7
        Вероятность того, что студент факультета C сдаст первую сессию P(A|B3) = 0.9
        Полная вероятность:
        P(A) = 1/4 * 0.8 + 1/4 * 0.7 + 1/2 * 0.9 = 0.825
        Студент сдал сессию.
        Вероятность того, что студент учится на факультете A
        P(B1|A) = (1/4) * 0.8 / 0.825 = 0.2424
        Вероятность того, что студент учится на факультете B
        P(B2|A) = (1/4) * 0.7 / 0.825 = 0.2121
        Вероятность того, что студент учится на факультете C
        P(B3|A) = (1/2) * 0.9 / 0.825 = 0.5455
    Ответ:
        Студент сдал сессию.
        Вероятность того, что студент учится на факультете A составляет 0.2424
        Вероятность того, что студент учится на факультете B составляет 0.2121
        Вероятность того, что студент учится на факультете C составляет 0.5455
    """
    print("Задача 4")
    p_a_bx = [
        {
            'faculty': 'A',
            'students': 1,
            'probability': 0.8
        },
        {
            'faculty': 'B',
            'students': 1,
            'probability': 0.7
        },
        {
            'faculty': 'C',
            'students': 2,
            'probability': 0.9
        }
    ]
    # p_a_bx = [0.9, 0.8, 0.6]
    total_students = reduce(lambda total, x: total + x.get('students'), p_a_bx, 0)
    p_bx = 1 / total_students
    p_a = reduce(lambda total, x: total + p_bx * x.get('students') * x.get('probability'), p_a_bx, 0)
    print(f"    Полная вероятность = {p_a:.4f}")
    print(f"    Студент сдал сессию.")
    for faculty in p_a_bx:
        student_probability = (faculty.get('students') / total_students) * faculty.get('probability') / p_a
        print(f"    Вероятность того, что студент учится на факультете {faculty.get('faculty')} "
              f"составляет {student_probability:.4f}")
    print()


def task_5():
    """
    Задача 5:
        Устройство состоит из трех деталей.
        Для первой детали вероятность выйти из строя в первый месяц равна 0.1, для второй - 0.2, для третьей - 0.25.
        Какова вероятность того, что в первый месяц выйдут из строя:
        а). все детали
        б). только две детали
        в). хотя бы одна деталь
        г). от одной до двух деталей?
    Решение:
        Используем формулу полной вероятности
        Вероятность выхода из строя первой детали = 0.1, рабочего состояния (1-0.1) = 0.9 в первый месяц
        Вероятность выхода из строя второй детали = 0.2, рабочего состояния (1-0.2) = 0.8 в первый месяц
        Вероятность выхода из строя третьей детали = 0.25, рабочего состояния (1-0.25) = 0.75 в первый месяц
        а). Чтобы вышли из строя все детали, необходимо чтобы совпали все три вероятности выхода из строя:
             0.1 * 0.2 * 0.25 = 0.005
        б). Чтобы вышли из строя только две детали, необходимо чтобы совпали две вероятности выхода из строя и
            одна вероятность рабочего состояния всех трех деталей поочередно:
             0.1 * 0.2 * 0.75 + 0.1 * 0.8 * 0.25 + 0.9 * 0.2 * 0.25 = 0.08
        в). Чтобы посчитать вероятность выхода из строя хотя бы одной детали, достаточно исключить вероятность
            рабочего состояния всех деталей:
            1 - 0.9 * 0.8 * 0.75 = 0.46
        г). Чтобы посчитать вероятность выхода из строя одной или двух деталей, достаточно исключить вероятность
            рабочего состояния всех деталей и вероятность неисправного состояния всех деталей:
            1 - 0.9 * 0.8 * 0.75 - 0.1 * 0.2 * 0.25 = 0.455
    """
    print("Задача 5")
    # вероятности выхода из строя деталей
    p1 = 0.1
    p2 = 0.2
    p3 = 0.25
    print(f"    Вероятности выхода из строя деталей: 1 = {p1}, 2 = {p2}, 3 = {p3}.")
    # обратные вероятности деталей
    q1 = 1 - p1
    q2 = 1 - p2
    q3 = 1 - p3
    print(f"    Вероятности рабочего состояния деталей 1 = {q1}, 2 = {q2}, 3 = {q3}.")
    print(f"    Вероятность того, что в первый месяц выйдут из строя...")
    p_v1 = p1 * p2 * p3
    print(f"    а) ...все детали составляет: {p_v1:.4f}")
    p_v2 = p1 * p2 * q3 + p1 * q2 * p3 + q1 * p2 * p3
    print(f"    б) ...только две детали составляет: {p_v2:.4f}")
    p_v3 = 1 - q1 * q2 * q3
    print(f"    в) ...хотя бы одна деталь составляет: {p_v3:.4f}")
    p_v4 = 1 - q1 * q2 * q3 - p_v1
    print(f"    г) ...от одной до двух деталей составляет: {p_v4:.4f}")
    print()


task_1()
task_2()
task_3()
task_4()
task_5()
